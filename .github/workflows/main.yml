name: CI/CD for React Spring Boot Monorepo

on:
  push:
    branches: [ main ]
    paths: # Trigger only if changes in these paths
      - 'apps/frontend/**'
      - 'apps/backend/**'
      - '.github/workflows/main.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/frontend/**'
      - 'apps/backend/**'
      - '.github/workflows/main.yml'

jobs:
  # Backend Jobs
  build-test-backend:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    if: github.event_name == 'push' # Simplified for debugging Gradle - REVISIT LATER
    defaults:
      run:
        working-directory: ./apps/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: List files in backend directory (for debugging)
        run: ls -la

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Backend with Gradle
        run: ./gradlew bootJar -x test --info # Skipping tests for brevity

      - name: Upload backend JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: apps/backend/build/libs/*.jar

  dockerize-push-backend:
    name: Dockerize and Push Backend
    needs: build-test-backend
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: apps/backend/build/libs # Dockerfile expects JAR here

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/backend
          file: ./apps/backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ise-job-board-backend:latest # ADJUST IMAGE NAME

  # Frontend Jobs
  build-test-frontend:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    # REVISIT IF CONDITION LATER
    if: |
      github.event_name == 'pull_request' ||
      (github.event_name == 'push' && (
        startsWith(github.head_commit.message, '[frontend]') ||
        contains(join(github.event.commits.*.modified, ' '), 'apps/frontend/') ||
        contains(join(github.event.commits.*.added, ' '), 'apps/frontend/') ||
        contains(join(github.event.commits.*.removed, ' '), 'apps/frontend/') ||
        contains(join(github.event.commits.*.modified, ' '), '.github/workflows/main.yml')
      ))
    defaults:
      run:
        working-directory: ./apps/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: npm ci

      - name: Run Frontend Tests (optional)
        run: npm test -- --watchAll=false # Ensure tests are set up

      - name: Build Frontend App (for testing/artifact)
        run: npm run build # Vite outputs to 'dist'

      - name: Upload frontend dist (optional, for inspection)
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: apps/frontend/dist

  dockerize-push-frontend:
    name: Dockerize and Push Frontend
    needs: build-test-frontend # Ensures tests pass and build is possible before dockerizing
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # No need to download frontend build artifact if Dockerfile builds from source

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/frontend # Dockerfile will build from source within this context
          file: ./apps/frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ise-job-board-frontend:latest # ADJUST IMAGE NAME

  # Deployment Job
  deploy-to-vps:
    name: Deploy to VPS
    needs: [dockerize-push-backend, dockerize-push-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Ensuring deployment directory exists..."
            mkdir -p ${{ secrets.VPS_DEPLOY_PATH }}
            cd ${{ secrets.VPS_DEPLOY_PATH }}

            echo "Pulling latest Docker images for all services..."
            docker compose -f ${{ secrets.VPS_DEPLOY_PATH }}/docker-compose.yml pull

            echo "Restarting services with Docker Compose..."
            docker compose -f ${{ secrets.VPS_DEPLOY_PATH }}/docker-compose.yml up -d --remove-orphans

            echo "Cleaning up old Docker images..."
            docker image prune -af
            echo "Deployment complete!"
